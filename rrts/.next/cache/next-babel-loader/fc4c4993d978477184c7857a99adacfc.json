{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport axios from 'axios';\nimport { ActionTypes } from './types';\nvar url = 'https://jsonplaceholder.typicode.com/todos';\nexport var fetchTodos = function fetchTodos() {\n  return function _callee(dispatch) {\n    var response;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(axios.get(url));\n\n          case 2:\n            response = _context.sent;\n            dispatch({\n              type: ActionTypes.fetchTodos,\n              payload: response.data\n            });\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n};\nexport var deleteTodo = function deleteTodo(id) {\n  return {\n    type: ActionTypes.deleteTodo,\n    payload: id\n  };\n};","map":{"version":3,"sources":["/Users/ggrumbley/Workbench/TS_Lab/rrts/actions/todos.ts"],"names":["axios","ActionTypes","url","fetchTodos","dispatch","get","response","type","payload","data","deleteTodo","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,WAAT,QAA4B,SAA5B;AAkBA,IAAMC,GAAG,GAAG,4CAAZ;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAC9B,SAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACkBJ,KAAK,CAACK,GAAN,CAAkBH,GAAlB,CADlB;;AAAA;AACCI,YAAAA,QADD;AAGLF,YAAAA,QAAQ,CAAmB;AACzBG,cAAAA,IAAI,EAAEN,WAAW,CAACE,UADO;AAEzBK,cAAAA,OAAO,EAAEF,QAAQ,CAACG;AAFO,aAAnB,CAAR;;AAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAQD,CATM;AAWP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,EAAD,EAAkC;AAC1D,SAAO;AACLJ,IAAAA,IAAI,EAAEN,WAAW,CAACS,UADb;AAELF,IAAAA,OAAO,EAAEG;AAFJ,GAAP;AAID,CALM","sourcesContent":["import axios from 'axios';\nimport { Dispatch } from 'redux';\nimport { ActionTypes } from './types';\n\nexport interface Todo {\n  id: number;\n  title: string;\n  completed: boolean;\n}\n\nexport interface FetchTodosAction {\n  type: ActionTypes.fetchTodos;\n  payload: Todo[];\n}\n\nexport interface DeleteTodoAction {\n  type: ActionTypes.deleteTodo;\n  payload: number;\n}\n\nconst url = 'https://jsonplaceholder.typicode.com/todos';\n\nexport const fetchTodos = () => {\n  return async (dispatch: Dispatch) => {\n    const response = await axios.get<Todo[]>(url);\n\n    dispatch<FetchTodosAction>({\n      type: ActionTypes.fetchTodos,\n      payload: response.data\n    });\n  };\n};\n\nexport const deleteTodo = (id: number): DeleteTodoAction => {\n  return {\n    type: ActionTypes.deleteTodo,\n    payload: id\n  };\n};\n"]},"metadata":{},"sourceType":"module"}