{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/ggrumbley/Workbench/TS_Lab/rrts/components/App.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchTodos, deleteTodo } from '../actions';\n\nclass _App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onButtonClick\", () => {\n      this.props.fetchTodos();\n      this.setState({\n        fetching: true\n      });\n    });\n\n    _defineProperty(this, \"onTodoClick\", id => {\n      this.props.deleteTodo(id);\n    });\n\n    this.state = {\n      fetching: false\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!prevProps.todos.length && this.props.todos.length) {\n      this.setState({\n        fetching: false\n      });\n    }\n  }\n\n  renderList() {\n    return this.props.todos.map(todo => {\n      return __jsx(\"div\", {\n        onClick: () => this.onTodoClick(todo.id),\n        key: todo.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, todo.title);\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, __jsx(\"button\", {\n      onClick: this.onButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"Fetch\"), this.state.fetching ? 'LOADING' : null, this.renderList());\n  }\n\n}\n\nconst mapStateToProps = ({\n  todos\n}) => {\n  return {\n    todos\n  };\n};\n\nexport const App = connect(mapStateToProps, {\n  fetchTodos,\n  deleteTodo\n})(_App);","map":{"version":3,"sources":["/Users/ggrumbley/Workbench/TS_Lab/rrts/components/App.tsx"],"names":["React","connect","fetchTodos","deleteTodo","_App","Component","constructor","props","setState","fetching","id","state","componentDidUpdate","prevProps","todos","length","renderList","map","todo","onTodoClick","title","render","onButtonClick","mapStateToProps","App"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAAeC,UAAf,EAA2BC,UAA3B,QAA6C,YAA7C;;AAaA,MAAMC,IAAN,SAAmBJ,KAAK,CAACK,SAAzB,CAAuD;AACrDC,EAAAA,WAAW,CAACC,KAAD,EAAkB;AAC3B,UAAMA,KAAN;;AAD2B,2CAYb,MAAY;AAC1B,WAAKA,KAAL,CAAWL,UAAX;AACA,WAAKM,QAAL,CAAc;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AACD,KAf4B;;AAAA,yCAiBdC,EAAD,IAAsB;AAClC,WAAKH,KAAL,CAAWJ,UAAX,CAAsBO,EAAtB;AACD,KAnB4B;;AAG3B,SAAKC,KAAL,GAAa;AAAEF,MAAAA,QAAQ,EAAE;AAAZ,KAAb;AACD;;AAEDG,EAAAA,kBAAkB,CAACC,SAAD,EAA4B;AAC5C,QAAI,CAACA,SAAS,CAACC,KAAV,CAAgBC,MAAjB,IAA2B,KAAKR,KAAL,CAAWO,KAAX,CAAiBC,MAAhD,EAAwD;AACtD,WAAKP,QAAL,CAAc;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AACD;AACF;;AAWDO,EAAAA,UAAU,GAAkB;AAC1B,WAAO,KAAKT,KAAL,CAAWO,KAAX,CAAiBG,GAAjB,CAAsBC,IAAD,IAAgB;AAC1C,aACE;AAAK,QAAA,OAAO,EAAE,MAAM,KAAKC,WAAL,CAAiBD,IAAI,CAACR,EAAtB,CAApB;AAA+C,QAAA,GAAG,EAAEQ,IAAI,CAACR,EAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGQ,IAAI,CAACE,KADR,CADF;AAKD,KANM,CAAP;AAOD;;AAEDC,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,OAAO,EAAE,KAAKC,aAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEG,KAAKX,KAAL,CAAWF,QAAX,GAAsB,SAAtB,GAAkC,IAFrC,EAGG,KAAKO,UAAL,EAHH,CADF;AAOD;;AAxCoD;;AA2CvD,MAAMO,eAAe,GAAG,CAAC;AAAET,EAAAA;AAAF,CAAD,KAA8C;AACpE,SAAO;AAAEA,IAAAA;AAAF,GAAP;AACD,CAFD;;AAIA,OAAO,MAAMU,GAAG,GAAGvB,OAAO,CACxBsB,eADwB,EAExB;AAAErB,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAFwB,CAAP,CAGjBC,IAHiB,CAAZ","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Todo, fetchTodos, deleteTodo } from '../actions';\nimport { StoreState } from '../reducers';\n\ninterface AppProps {\n  todos: Todo[];\n  fetchTodos: Function;\n  deleteTodo: typeof deleteTodo;\n}\n\ninterface AppState {\n  fetching: boolean;\n}\n\nclass _App extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = { fetching: false };\n  }\n\n  componentDidUpdate(prevProps: AppProps): void {\n    if (!prevProps.todos.length && this.props.todos.length) {\n      this.setState({ fetching: false });\n    }\n  }\n\n  onButtonClick = (): void => {\n    this.props.fetchTodos();\n    this.setState({ fetching: true });\n  };\n\n  onTodoClick = (id: number): void => {\n    this.props.deleteTodo(id);\n  };\n\n  renderList(): JSX.Element[] {\n    return this.props.todos.map((todo: Todo) => {\n      return (\n        <div onClick={() => this.onTodoClick(todo.id)} key={todo.id}>\n          {todo.title}\n        </div>\n      );\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.onButtonClick}>Fetch</button>\n        {this.state.fetching ? 'LOADING' : null}\n        {this.renderList()}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ todos }: StoreState): { todos: Todo[] } => {\n  return { todos };\n};\n\nexport const App = connect(\n  mapStateToProps,\n  { fetchTodos, deleteTodo }\n)(_App);\n"]},"metadata":{},"sourceType":"module"}